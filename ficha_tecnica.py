import streamlit as st
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from datetime import datetime
import os
import re
import platform
import subprocess

# Fun√ß√µes auxiliares
def validar_email(email):
    return re.match(r"[^@]+@[^@]+\.[^@]+", email)

def validar_telefone(telefone):
    return re.match(r"\d{9,}", telefone)

def abrir_arquivo(caminho):
    sistema = platform.system()
    try:
        if sistema == "Windows":
            os.startfile(caminho)
        elif sistema == "Darwin":
            subprocess.call(["open", caminho])
        else:
            subprocess.call(["xdg-open", caminho])
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel abrir o arquivo: {e}")

def gerar_pdf_txt(dados):
    pasta = "FichasTecnicas"
    os.makedirs(pasta, exist_ok=True)
    nome_base = dados["Nome do ficheiro"].replace(" ", "_")
    caminho_pdf = os.path.join(pasta, f"Ficha_T√©cnica_{nome_base}.pdf")
    caminho_txt = os.path.join(pasta, f"Ficha_T√©cnica_{nome_base}.txt")

    # PDF
    c = canvas.Canvas(caminho_pdf, pagesize=A4)
    width, height = A4
    margin = 50
    c.setFont("Helvetica-Bold", 20)
    c.drawCentredString(width / 2, height - margin, "Ficha T√©cnica para Gr√°fica")
    c.setLineWidth(1)
    c.line(margin, height - margin - 10, width - margin, height - margin - 10)
    y = height - margin - 40

    for campo in campos:
        valor = dados.get(campo, "")
        c.setFont("Helvetica-Bold", 12)
        c.drawString(margin, y, f"{campo}:")
        c.setFont("Helvetica", 12)
        c.drawString(margin + 150, y, valor)
        y -= 25
        if y < margin:
            c.showPage()
            y = height - margin - 40
    c.save()

    # TXT
    try:
        with open(caminho_txt, 'w', encoding='utf-8') as f:
            f.write("Ficha T√©cnica para Gr√°fica\n")
            f.write("=" * 40 + "\n\n")
            for campo in campos:
                valor = dados.get(campo, "")
                f.write("{:<30}: {}\n".format(campo, valor))
    except Exception as e:
        st.error(f"Erro ao gerar arquivo TXT: {e}")
        return None, None

    return caminho_pdf, caminho_txt

# Campos
campos = [
    "Nome do ficheiro",
    "Nome do designer",
    "Formato do livro",
    "Cores aplicadas",
    "Dimens√£o do livro",
    "Dimens√£o da capa",
    "Acabamentos do miolo",
    "Acabamentos da capa",
    "Fontes usadas",
    "Ficheiro PDF vs Edit√°vel",
    "Data",
    "Email",
    "Telefone"
]

# Interface Streamlit
st.set_page_config(page_title="Ficha T√©cnica Editorial", layout="centered")
st.title("üìù Ficha T√©cnica Editorial")

with st.form("formulario"):
    dados = {}
    for campo in campos:
        if campo == "Data":
            dados[campo] = st.text_input(campo, datetime.now().strftime("%d/%m/%Y"))
        else:
            dados[campo] = st.text_input(campo)

    submit = st.form_submit_button("Gerar PDF e TXT")

# A√ß√£o ao submeter
if submit:
    if not dados["Nome do ficheiro"]:
        st.warning("O campo 'Nome do ficheiro' √© obrigat√≥rio.")
    elif not validar_email(dados["Email"]):
        st.warning("Por favor, insira um email v√°lido.")
    elif not validar_telefone(dados["Telefone"]):
        st.warning("Por favor, insira um n√∫mero de telefone v√°lido (m√≠nimo 9 d√≠gitos).")
    else:
        pdf_path, txt_path = gerar_pdf_txt(dados)
        if pdf_path and txt_path:
            st.success("Relat√≥rios gerados com sucesso!")
            st.download_button("üìÑ Baixar PDF", open(pdf_path, "rb"), file_name=os.path.basename(pdf_path))
            st.download_button("üìÑ Baixar TXT", open(txt_path, "rb"), file_name=os.path.basename(txt_path))

            # Pr√©-preenchimento do email
            mailto = f"mailto:{dados['Email']}?subject=Ficha T√©cnica para Gr√°fica&body=Segue em anexo a ficha t√©cnica do projeto editorial."
            st.markdown(f"[üìß Enviar por email]({mailto})", unsafe_allow_html=True)
